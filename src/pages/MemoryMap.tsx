import { useState } from 'react';
import { motion } from 'framer-motion';
import Icon from '@/components/ui/icon';
import { useNavigate } from 'react-router-dom';

interface Memory {
  id: string;
  biome: string;
  icon: string;
  message: string;
  color: string;
}

const allMemories: Memory[] = [
  { id: '1', biome: '–î–∂—É–Ω–≥–ª–∏', icon: 'üêµ', message: '–ú–∞–º–∞, —Ç—ã —Ç–∞–∫ –∂–µ –∑–∞–±–æ—Ç–∏–ª–∞—Å—å –æ–±–æ –º–Ω–µ, –∫–∞–∫ —ç—Ç–∞ –æ–±–µ–∑—å—è–Ω–∫–∞ –æ —Å–≤–æ–µ–º –º–∞–ª—ã—à–µ!', color: '#10B981' },
  { id: '2', biome: '–î–∂—É–Ω–≥–ª–∏', icon: 'üçå', message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å–µ –≤–∫—É—Å–Ω—ã–µ –æ–±–µ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≥–æ—Ç–æ–≤–∏–ª–∞ —Å –ª—é–±–æ–≤—å—é!', color: '#FFD700' },
  { id: '3', biome: '–î–∂—É–Ω–≥–ª–∏', icon: 'üíß', message: '–¢–≤–æ—è –ª—é–±–æ–≤—å —Ç–µ—á–µ—Ç –≤–µ—á–Ω–æ, –∫–∞–∫ —ç—Ç–æ—Ç –≤–æ–¥–æ–ø–∞–¥!', color: '#00CED1' },
  { id: '4', biome: '–î–∂—É–Ω–≥–ª–∏', icon: 'ü¶ã', message: '–¢—ã —É—á–∏–ª–∞ –º–µ–Ω—è –≤–∏–¥–µ—Ç—å –∫—Ä–∞—Å–æ—Ç—É –≤ –∫–∞–∂–¥–æ–º –º–∞–ª–µ–Ω—å–∫–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏!', color: '#FF69B4' },
  { id: '5', biome: '–î–∂—É–Ω–≥–ª–∏', icon: 'üå∫', message: '–¢–≤–æ—è –∑–∞–±–æ—Ç–∞ –ø–æ–º–æ–≥–∞–ª–∞ –º–Ω–µ —Ä–∞—Å—Ü–≤–µ—Ç–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ—Ç —Ü–≤–µ—Ç–æ–∫!', color: '#FF1493' },
  { id: '6', biome: '–î–∂—É–Ω–≥–ª–∏', icon: 'ü¶ú', message: '–ü–æ–º–Ω–∏—à—å, –∫–∞–∫ –º—ã –≤–º–µ—Å—Ç–µ —É—á–∏–ª–∏ —Å—Ç–∏—Ö–∏? –¢—ã –±—ã–ª–∞ —Ç–∞–∫–∏–º —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º —É—á–∏—Ç–µ–ª–µ–º!', color: '#FF4500' },
  { id: '7', biome: '–î–∂—É–Ω–≥–ª–∏', icon: 'üèûÔ∏è', message: '–ù–∞—à–∞ —Å–µ–º—å—è —Ç–µ—á–µ—Ç, –∫–∞–∫ —ç—Ç–∞ —Ä–µ–∫–∞ - –≤—Å–µ–≥–¥–∞ –≤–º–µ—Å—Ç–µ, –≤—Å–µ–≥–¥–∞ –≤–ø–µ—Ä–µ–¥!', color: '#4682B4' },
  
  { id: '8', biome: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', icon: 'üêß', message: '–¢—ã –≤—Å–µ–≥–¥–∞ –∑–∞—â–∏—â–∞–ª–∞ –Ω–∞—à—É —Å–µ–º—å—é, –∫–∞–∫ —ç—Ç–∏ –ø–∏–Ω–≥–≤–∏–Ω—ã –∑–∞—â–∏—â–∞—é—Ç —Å–≤–æ–∏—Ö –ø—Ç–µ–Ω—Ü–æ–≤!', color: '#00BFFF' },
  { id: '9', biome: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', icon: '‚ùÑÔ∏è', message: '–ö–∞–∂–¥–æ–µ —Ç–≤–æ–µ –¥–æ–±—Ä–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –∫–∞–∫ —ç—Ç–∞ —Å–Ω–µ–∂–∏–Ω–∫–∞!', color: '#E0FFFF' },
  { id: '10', biome: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', icon: 'üåå', message: '–¢–≤–æ—è –¥—É—à–∞ —Å–∏—è–µ—Ç —Ç–∞–∫ –∂–µ —è—Ä–∫–æ, –∫–∞–∫ —ç—Ç–æ —Å–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ!', color: '#00FF7F' },
  { id: '11', biome: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', icon: 'üßä', message: '–¢–≤–æ—è –º—É–¥—Ä–æ—Å—Ç—å –≥–ª—É–±–æ–∫–∞, –∫–∞–∫ –ø–æ–¥–≤–æ–¥–Ω–∞—è —á–∞—Å—Ç—å —ç—Ç–æ–≥–æ –∞–π—Å–±–µ—Ä–≥–∞!', color: '#B0E0E6' },
  { id: '12', biome: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', icon: '‚≠ê', message: '–¢—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –º–æ–µ–π –ø—É—Ç–µ–≤–æ–¥–Ω–æ–π –∑–≤–µ–∑–¥–æ–π!', color: '#FFD700' },
  { id: '13', biome: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', icon: 'üêã', message: '–¢–≤–æ—è –ª—é–±–æ–≤—å –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–∞, –∫–∞–∫ –æ–∫–µ–∞–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–ª–∞–≤–∞–µ—Ç —ç—Ç–æ—Ç –∫–∏—Ç!', color: '#4169E1' },
  { id: '14', biome: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', icon: 'üåô', message: '–î–∞–∂–µ –≤ —Å–∞–º—ã–µ —Ö–æ–ª–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Ç–≤–æ—è –∑–∞–±–æ—Ç–∞ —Å–æ–≥—Ä–µ–≤–∞–ª–∞ –º–µ–Ω—è!', color: '#F0E68C' },
  
  { id: '15', biome: '–ö–æ—Å–º–æ—Å', icon: 'üåç', message: '–ù–∞ —ç—Ç–æ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –ø–ª–∞–Ω–µ—Ç–µ —è –≤—Å—Ç—Ä–µ—Ç–∏–ª —Å–∞–º–æ–≥–æ –¥–æ—Ä–æ–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ - —Ç–µ–±—è, –º–∞–º–∞!', color: '#1E90FF' },
  { id: '16', biome: '–ö–æ—Å–º–æ—Å', icon: '‚òÄÔ∏è', message: '–¢—ã - –º–æ–µ —Å–æ–ª–Ω—Ü–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å–µ–≥–¥–∞ —Å–æ–≥—Ä–µ–≤–∞–µ—Ç –º–µ–Ω—è —Å–≤–æ–∏–º —Ç–µ–ø–ª–æ–º!', color: '#FFD700' },
  { id: '17', biome: '–ö–æ—Å–º–æ—Å', icon: 'üåô', message: '–ö–∞–∫ –ª—É–Ω–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–≤–µ—Ç —Å–æ–ª–Ω—Ü–∞, —è —Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç—Ä–∞–∂–∞—Ç—å —Ç–≤–æ—é –¥–æ–±—Ä–æ—Ç—É!', color: '#C0C0C0' },
  { id: '18', biome: '–ö–æ—Å–º–æ—Å', icon: '‚≠ê', message: '–ó–∞–≥–∞–¥–∞–π –∂–µ–ª–∞–Ω–∏–µ! –Ø —Å–¥–µ–ª–∞—é –≤—Å–µ, —á—Ç–æ–±—ã –æ–Ω–æ —Å–±—ã–ª–æ—Å—å!', color: '#FFFFE0' },
  { id: '19', biome: '–ö–æ—Å–º–æ—Å', icon: 'üõ∞Ô∏è', message: '–ö–∞–∫ —Å–ø—É—Ç–Ω–∏–∫ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ø–ª–∞–Ω–µ—Ç–æ–π, —è –≤—Å–µ–≥–¥–∞ –±—É–¥—É —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π!', color: '#708090' },
  { id: '20', biome: '–ö–æ—Å–º–æ—Å', icon: 'üöÄ', message: '–¢—ã –¥–∞–ª–∞ –º–Ω–µ –∫—Ä—ã–ª—å—è, —á—Ç–æ–±—ã –ª–µ—Ç–µ—Ç—å –∫ —Å–∞–º—ã–º —Å–º–µ–ª—ã–º –º–µ—á—Ç–∞–º!', color: '#FF6347' },
  { id: '21', biome: '–ö–æ—Å–º–æ—Å', icon: '‚ú®', message: '–¢—ã - –º–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä –≤ –∂–∏–∑–Ω–∏, –∫–∞–∫ —ç—Ç–æ —Å–æ–∑–≤–µ–∑–¥–∏–µ –¥–ª—è –º–æ—Ä–µ–ø–ª–∞–≤–∞—Ç–µ–ª–µ–π!', color: '#E6E6FA' },
];

export default function MemoryMap() {
  const navigate = useNavigate();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedBiome, setSelectedBiome] = useState<string>('–í—Å–µ');

  const filteredMemories = allMemories.filter(memory => {
    const matchesSearch = memory.message.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesBiome = selectedBiome === '–í—Å–µ' || memory.biome === selectedBiome;
    return matchesSearch && matchesBiome;
  });

  return (
    <div className="min-h-screen bg-space-black py-12 px-4">
      <div className="max-w-6xl mx-auto">
        <button
          onClick={() => navigate('/')}
          className="mb-8 px-6 py-3 bg-neon-purple/80 backdrop-blur-md text-white rounded-full hover:bg-neon-purple transition-all flex items-center gap-2 font-body border border-neon-purple/30"
        >
          <Icon name="ArrowLeft" size={20} />
          –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </button>

        <motion.h1
          initial={{ opacity: 0, y: -30 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-4xl md:text-6xl font-bold text-white mb-8 font-heading text-center text-glow"
        >
          üó∫Ô∏è –ö–∞—Ä—Ç–∞ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        </motion.h1>

        <div className="mb-8 space-y-4">
          <div className="relative">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-6 py-4 bg-deep-purple/50 backdrop-blur-md border-2 border-cyan-blue/50 rounded-2xl text-white placeholder-white/50 focus:outline-none focus:border-cyan-blue font-body"
            />
            <Icon name="Search" size={24} className="absolute right-4 top-1/2 transform -translate-y-1/2 text-cyan-blue" />
          </div>

          <div className="flex gap-3 flex-wrap justify-center">
            {['–í—Å–µ', '–î–∂—É–Ω–≥–ª–∏', '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', '–ö–æ—Å–º–æ—Å'].map((biome) => (
              <button
                key={biome}
                onClick={() => setSelectedBiome(biome)}
                className={`px-6 py-2 rounded-full font-body transition-all ${
                  selectedBiome === biome
                    ? 'bg-neon-purple text-white'
                    : 'bg-white/10 text-white/70 hover:bg-white/20'
                }`}
              >
                {biome}
              </button>
            ))}
          </div>

          <div className="text-center text-cyan-blue font-body">
            –ù–∞–π–¥–µ–Ω–æ: {filteredMemories.length} –∏–∑ {allMemories.length}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredMemories.map((memory, index) => (
            <motion.div
              key={memory.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.05 }}
              className="bg-gradient-to-br from-deep-purple/50 to-neon-purple/30 backdrop-blur-lg rounded-2xl p-6 border border-neon-purple/30 hover:border-cyan-blue/50 transition-all hover:scale-105 group"
            >
              <div className="flex items-start gap-4">
                <div 
                  className="text-4xl w-16 h-16 flex items-center justify-center rounded-full group-hover:scale-110 transition-transform"
                  style={{ backgroundColor: `${memory.color}40` }}
                >
                  {memory.icon}
                </div>
                <div className="flex-1">
                  <div className="text-xs text-cyan-blue mb-2 font-body">{memory.biome}</div>
                  <p className="text-white font-body leading-relaxed">{memory.message}</p>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
}
